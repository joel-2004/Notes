//to create 
db.createCollection("Players")

//show database
show dbs

//drop database
 db.dropDatabase()

//to use a database
 use footballers //if it is not created it will create on its own

//insert one
db.player.insertOne({name:"Joel",jersey_no:10,country:"Brazil"})
if player is not created it will create on its own 

//display the database
db.player.find()

//insert many
db.player.insertMany([{name:"NEYMAR",jersey_no:"10"},{name:"MESSI",jersey_no:10}])

//datatypes
  Strings can be in double or single quotes, strings can contain space  name:"joel"
  Integer jersey_no:10
  double goalsPerMatch:3.33
  boolean goalKeeper:false
  date joinDate:new Date() // if no paramter inside date function the current date will be included     
  null endDate:null basically no value
  arrays position:["CF","LF"]
  nested document {address:{
    streetName:"demo",
    city:"kodaikanal",
    pincode:624101
  }}

//sorting
db.player.find().sort({name:1})// to print in alphabetical order use 1
to print in reverse use -1
same for numbers also 
 

//limiting
db.player.find().limit(2)
no of documents we want to return as argument

//combo of limit() and sort()
db.player.find().sort({name:1}).limit(1)

//find
db.player.find({query},{projection})
db.player.find({name:"Joel"}) //only prints the name with "Joel"
db.player.find({name:"Joel",jersey_no:10})

the second argument is the projection in find
db.player.find({},{name:true}) // prints only the name of all datas
db.player.find({jersey_no:10},{name:true})//prints the players with jersey_no 10
can use name:1 for true as well
mongoDb by default gives id, if we dont need it then  db.player.find({jersey_no:10},{_id:false,name:true})  


//update
can updateOne or updateMany
//updateOne
takes in two paramters db.player.updateOne({filter},{update})
$set:{} in the update paramter to change value
db.player.updateOne({name:"Joel"},{$set:{jersey_no:7}})
if the filed aldready exists it will update, else it will create
Better to update a object by id since they are unique
to remove a field we use $unset:{} db.player.updateOne({name:"Joel"},{$unset:{jersey_no:7}})

//updateMany
db.player.updateMany({},{$set:{position:"forward"}}) 
since first paramter is empty it will update all the objects
db.player.updateMany({jersey_no:10},{$set:{jersey_no:11}})
we can give a filter like updateOne in first argument
db.player.updateMany({jersey_no:{$exists:false}},{$set:{jersey_no:10}})
only updated whereever the jersey_no was false or not present

//delete
similar to find with one paramter
//deleteOne
db.player.deleteOne({name:"Joel"})

//deleteMany
db.player.deleteMany({position:"forward"})
delete every object that has position as forward

db.player.deleteMany({jersey_no:{$exists:false}})
//if any object does not have a jersey_no attribute it will delete

//comparision operators
$ne means not equal
db.player.find({name:{$ne:"Joel"}})
find every object that does not have the name attribute as Joel

$gt greater than
db.player.find({jersey_no:{$gt:7}})

$lt means lesser than
db.player.find({jersey_no:{$lt:10}})

$lte lesser than or equal to
db.player.find({jersey_no:{$lte:10}})

$gte greater than or equal to
db.player.find({jersey_no:{$gte:10}})

//between a range
greater than 7 and lesser than or equal to 10
db.player.find({jersey_no:{$gt:7,$lte:10}})

//$in 
db.player.find({name:{$in:["Joel","NEYMAR"]}})
will print the values if they are from the array

//$nin
not in
db.player.find({name:{$nin:["Joel","NEYMAR"]}})
will print Details of objects except joel, NEYMAR

//logical operators
works only when both conditions are true
$and:[{},{}]
db.player.find({$or:[{name:"Joel"},{jersey_no:{$lte:10}}]})

$or:[{},{}]
either one has to be true
db.player.find({$or:[{name:"Joel"},{jersey_no:{$lte:7}}]})

//$nor:[{},{}]
both need to be false to print
db.player.find({$nor:[{name:"Joel"},{jersey_no:{$lte:7}}]})

//$not
prints the opposite
 db.player.find({jersey_no:{$not:{$gte:10}}})

 //indexes
 we use linear search by default to find an object
 to make search faster we use index
 db.player.createIndex({name:1}) 
 1 for ascending, -1 for descending
 db.player.getIndexes() // show the indexes, id index is created by default
 db.player.dropIndex("name_1") //to drop index name_1 is the name of the index
 //the index uses B-tree, it has a disadvantage, though it reduces the speed of search time, it affects the time taken
 for doing the CRUD operations. So,we have to use indexes wisely 
