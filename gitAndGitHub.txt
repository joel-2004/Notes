git:
It is the version control system, it is the tech used to do version control.

___________________________________________________________________________________________________________________________

GitHub: It is an online platform to share,look,contribute.
There are other platforms to do the same like gitlab,Bitbucket

___________________________________________________________________________________________________________________________

useOf git:

-Maintaining versions
-Opens Source contribution
-History of the changes in project(Who made change in what line,at what time)

___________________________________________________________________________________________________________________________

bash commands:

ls - show list

mkdir <directory_name> - Make directory(Folder)

cd <directory_name> - change directory to go to a directory

git init - initialise an empty git repo,then .git would be created

.git - a local repository, because we are using dot it is hidden 

ls -a - to show hidden list as well

touch <file_Name> (touch demo.txt) - creates a file named demo

vi <file_name> (vi demo.txt) - edit the file,like write something in it
    i - to insert
    esc - to come out of insert mode
    :w - save
    :x - save and quit vi mode
    :q! - quit vi mode

cat <file_name> (cat demo.txt) - displays the file with its data	

rm -rf demo.txt - rm(remove) rf(remove file) demo.txt, deletes the file
___________________________________________________________________________________________________________________________

git commands:

git status - shows the status of git

git add . - add all the files in the local repo

git add names.txt - add only one file

git commit -m "commit" - commit the changes you have made with a msg, Each commit can be considered as a version

git restore --staged <filename> - to unstage,meaning after we do git add <filename>,if we dont want to commit we can use this

git log - shows entire history(commits) of the project

git reset <commit_id(from git log)> - reset to that commit, it remove all commits in between. Those removed commit will be in the unstaged section

git stash - It sends the staged files to a backstage, we can get it back from there if needed.

git stash pop - Getting the top stash and merging with the current staged files

git stash clear - to clear the backstage area

___________________________________________________________________________________________________________________________

GitHub:

git remote add origin https://github.com/joel-2004/LoginForm - This command connects our local git repo to remote repos like gitHub,gitLab etc...

git clone <link> - this command only clones the git repo to local repo

git push origin master - to push into the master branch

___________________________________________________________________________________________________________________________

Branches in git(master/main):

each commit in a git looks a branch. (It looks like a Directed Acyclic Graph(DAG))

         0    Commit 1
         |  
         0    Commit 2
         |
master-> 0    Commit 3

It is good to create a new branch when adding a new feature or clearing a bug
Only the finalised code should be in the main branch, for example in a open source repo like react, if an unfinalised,untested code is given, then all the devs will face issuses.
 
git branch newBranch - to create a new branch

git checkout newBranch- when this command is used a pointer now points to the head of the latest node.


         0    Commit 1
         |  
         0    Commit 2                                        * - to indicate where the head is pointing to
         |
master-> 0 <-newBranch(*)    Commit 3


a new Pointer is pointing to the head of our branch.

now if a commit is made only the newBranch would move like:  
         0    Commit 1
         |  
         0    Commit 2
         |
master-> 0    Commit 3  
         |
         0    Commit 4
         |
         0 <-newBranch(*)  Commit 5

Note that the master point did not move 

git checkout main -

                            0    Commit 1
                            |  
                            0    Commit 2
                            |
                            0    Commit 3  
                            |
                            0    Commit 4
                            |
                    ------  0 ----------
                    |                   |
         master(*)->0 Commit 6          0 <-newBranch  Commit 5

git merge newBranch - to merge the branches 



                            0    Commit 1
                            |  
                            0    Commit 2
                            |
                            0    Commit 3  
                            |
                            0    Commit 4
                            |
                    ------  0 ----------
                    |                   |
         master(*)->0 Commit 6          0 <-newBranch  Commit 5
                    |                   |
          Commit 7  0___________________|


git push origin master - to push to master branch

___________________________________________________________________________________________________________________________

Fork:

Why fork?

To contribute to a project, any random person cannot make changes directly. It would result in chaos.
So we fork the project which creates a copy of the file in our github account.

To clone a project and get it to our system
git clone <link> - this command only clones the git repo to local repo

git clone https://github.com/joel-2004/LoginForm

git remote add upstream <link of where we have forked from> - To change the upstream of our git

git push origin myBracnh - to make changes in the forked copy in my account

now to commit to the forked project(The main project) we need to create a pull request

One branch can have only one pull request, after that all the commits will be added

For every different feature or bug fix, it is good to create a new branch.
Example : in an open source project everyone would be working on different features and different bugs of the same project,
If we all work on the same branch, it is hard to maintain the code, in case i make a unsatisfied code and someone else 
makes a satisfied code. They would not be able to add it to the main branch.It causes chaos

when removing a commit by using
git reset <commit_id>
git stash

we need to force push because our commit history in the git repo would not be same as local, note that git uses like a 
chain hashing rechnique for commit_id

git push origin master -f (force push)

___________________________________________________________________________________________________________________________

NOTE: There is more in Kunal Kushawas video, this much is enough for now 

Link: https://www.youtube.com/watch?v=apGV9Kg7ics&t=2158s