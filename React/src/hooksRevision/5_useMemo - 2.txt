useMemo - 2:


WARNING : The below code may be cautious on some device so that OS will automatically terminate the program .cause it use so much memory space ( 29 million )

let i = 0;
export const arr = new Array(29_000_000).fill(0).map((e) => {
  i++;
  return {
    id: i,
    isSelected: i === 29_000_000,
  };
});

import React from "react";
import { arr } from "./DataArray";
import { useState, useMemo } from "react";
function MemoDemo() {
  const [count, setCount] = useState(0);
  const [items] = useState(arr);
  let item = items.find((e) => e.isSelected === true);
  return (
    <>
      <h1>Count : {count}</h1>
      <h1>Selected Item : {item.id}</h1>
      <button
        onClick={() => {
          setCount(count + 1);
        }}
      >
        Increment
      </button>
    </>
  );
}

export default MemoDemo;

WHY USEMEMO ?

In the above code during each time increment / change the state of the count , it re-renders the component.
So during each time re-render the find functoin will run.
The find function rund 29 million times during each render.
It definetly slow down the rendering of the component.

OPTIMIZED CODE :

import React from "react";
import { arr } from "./DataArray";
import { useState, useMemo } from "react";
let item;
function MemoDemo() {
  const [count, setCount] = useState(0);
  const [items] = useState(arr);
  useMemo(() => {
    item = items.find((e) => e.isSelected === true);
  }, [items]);

  return (
    <>
      <h1>Count : {count}</h1>
      <h1>Selected Item : {item.id}</h1>
      <button
        onClick={() => {
          setCount(count + 1);
        }}
      >
        Increment
      </button>
    </>
  );
}

export default MemoDemo;